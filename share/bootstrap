#!/opt/runtime/bin/perl

# (c) 2018 CAPSiDE
# Jose Luis Martinez Torres
# Licensed under Apache 2.0
# Implements a custom runtime handler for Perl. See:
# https://docs.aws.amazon.com/lambda/latest/dg/runtimes-api.html
# https://docs.aws.amazon.com/lambda/latest/dg/runtimes-walkthrough.html
# for more information

use strict;
use warnings;

use lib '/var/task', '/opt/layer1-lib/lib/perl5';

use JSON::MaybeXS;
my $json_parser = JSON::MaybeXS->new;

use HTTP::Tiny;
my $ua = HTTP::Tiny->new;

my $aws_lambda_runtime_api = $ENV{ AWS_LAMBDA_RUNTIME_API } or die "No AWS_LAMBDA_RUNTIME_API env var";
my $api_base = "http://$aws_lambda_runtime_api/2018-06-01";
my $handler = $ENV{ _HANDLER } or die "No _HANDLER env var";

my ($file, $entrypoint) = split /\./, $handler, 2;
die "Can't derive the file to require from the handler" if (not defined $file);
die "Can't find the file to require from the handler" if (not -e $file);
die "Can't derive the function to call from the handler" if (not defined $entrypoint);

eval {
  require $file;
};
# TODO: call the init error URL
die "Compilation error: $@" if ($@);

while (1) {
  my $request = $ua->get("$api_base/runtime/invocation/next");
  die "Error when getting request: " . $request->{ content } if (not $request->{ success });

  my $request_id = $request->{ headers }->{'lambda-runtime-aws-request-id'};
  die "Didn't get the request-id in the expected header" if (not defined $request_id);

  my $event = $json_parser->decode($request->{ content });

  my $result = eval {
    # no strict refs is so we can call a subroutine whose name is stored in variable
    # entrypoint while 'use strict' is on
    no strict 'refs';
    &$entrypoint($event);
  };
  if ($@) {
    my $error_message = $@;
    $error_message =~ s/"/\\\"/g;
    my $error_body = sprintf '{"errorMessage":"%s","errorType":"UnhandledException"}', $error_message;

    my $error_url = "$api_base/runtime/invocation/$request_id/error";
    my $result = $ua->post($error_url, {
                             content => $error_body,
                           });
  } else {
    my $success_url = "$api_base/runtime/invocation/$request_id/response";
    my $result = $ua->post($success_url, {
                             content => $result,
                           });
    die "Error when reporting response: " . $result->{ content } if (not $result->{ success });
  }
}

